@model CatchMe.Models.task
@using session = CatchMe.Helpers.UserSession
@using selectlists = CatchMe.Helpers.SelectItems


@{
    ViewBag.Title = "Create";

    if (!string.IsNullOrWhiteSpace(session.Current.Username))
    { 
    Model.initiator = session.Current.Firstname;
    
    }
        
        
                }

        <h2><span class="fa fa-plus-circle"></span>&nbsp;New Task for @session.Current.CurrentProject</h2>


        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>task</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <input type="hidden" name="project_id" value="@session.Current.CurrentProjectId" />
                <div class="form-group">
                    @Html.LabelFor(model => model.project_id, "project_id", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        <input type="text" value="@session.Current.CurrentProject" readonly class="form-control" />

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.assigned_to, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">

                        @Html.DropDownList("assigned_to", null, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.assigned_to, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.status, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">

                        <input type="hidden" name="status" value="0" readonly />
                        <input class="form-control" value="New" readonly />
                        @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.type, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">

                        @Html.DropDownList("type", null, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.type, "", new { @class = "text-danger" })
                    </div>
                </div>


                @*<div class="form-group">
                    @Html.LabelFor(model => model.status, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">                        
                        @Html.DropDownList("status", null, new { @class = "form-control"  })                        
                        @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
                    </div>
                </div>*@





                @*<div class="form-group">
                    @Html.LabelFor(model => model.test_status, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        
                        @Html.DropDownList("test_status", null,  new { @class = "form-control" } )
                        @Html.ValidationMessageFor(model => model.test_status, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                <div class="form-group">
                    @Html.LabelFor(model => model.title, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.TextAreaFor(model => model.description, new { @class = "form-control" ,@id="area2" } )
                        @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.initiator, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.initiator, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.initiator, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.complexity, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownList("complexity", null,  new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.complexity, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.priority, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownList("priority", null, new { @class = "form-control" } )
                        @Html.ValidationMessageFor(model => model.complexity, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.due_date, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.due_date, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.due_date, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-6">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }

        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>

        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/nicedit")
<script>


        bkLib.onDomLoaded(function () {

            //nicEditors.allTextAreas();
            new nicEditor({
                //  fullPanel: true,
                buttonList: ['fontSize', 'bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'subscript', 'superscript', 'strikethrough', 'removeformat', 'indent', 'outdent', 'hr', 'forecolor', 'bgcolor']
            }).panelInstance('area2');
            //nicEditors.findEditor('myArea2');
        });
            </script>


        }
