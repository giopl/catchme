@model CatchMe.Models.task
@using session = CatchMe.Helpers.UserSession
@using selectlists = CatchMe.Helpers.SelectItems


@{
    ViewBag.Title = "Create";

    if (!string.IsNullOrWhiteSpace(session.Current.Username))
    { 
       Model.initiator = session.Current.Firstname;    
    }
    var desc = ViewBag.ProjectDesc;
        
 }

        <h2 class="hidetaskitem"><span class="fa fa-plus-circle"></span>&nbsp;Create Task</h2>
    
        <h2 class="hideinfoitem" style="display:none"><span class="fa fa-info-circle"></span>&nbsp;Create Information item</h2>




        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4 class="text-primary" style="margin-left:4%">@session.Current.CurrentProject<br /><small class="text-muted">@desc</small></h4>
                    
                
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <input type="hidden" name="project_id" value="@session.Current.CurrentProjectId" />
                <div class="form-group">
                    @Html.LabelFor(model => model.project_id, "project_id", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        <input type="text" value="@session.Current.CurrentProject" readonly class="form-control" />

                    </div>
                </div>

                <div class="form-group hidetaskitem">
                    @Html.LabelFor(model => model.assigned_to, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">

                        @Html.DropDownListFor(model => model.assigned_to,(SelectList)ViewBag.assigned_to, "Unassigned", new { @class = "form-control chosen-select" })
                        @Html.ValidationMessageFor(model => model.assigned_to, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group hidetaskitem">
                    @Html.LabelFor(model => model.status, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">

                        <input type="hidden" name="status" value="0" readonly />
                        <input class="form-control" value="New" readonly />
                        @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.type, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">

                        @Html.DropDownList("type", null, new { @class = "form-control chosen-select typechanged", @required="" })
                        @Html.ValidationMessageFor(model => model.type, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.title, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.TextAreaFor(model => model.description, new { @class = "tinymce"  } )
                        @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group hidetaskitem">
                    @Html.LabelFor(model => model.initiator, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.initiator, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.initiator, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="hidetaskitem">
                        @Html.LabelFor(model => model.complexity, htmlAttributes: new { @class = "control-label col-md-2" })
                    </div>
                    <div class="hideinfoitem" style="display:none">
                        <label class="control-label col-md-2">Importance</label>
                    </div>

                    <div class="col-md-6">
                        @Html.DropDownList("complexity", null,  new { @class = "form-control chosen-select" })
                        @Html.ValidationMessageFor(model => model.complexity, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group hidetaskitem">
                    @Html.LabelFor(model => model.priority, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownList("priority", null, new { @class = "form-control chosen-select" })
                        @Html.ValidationMessageFor(model => model.priority, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group hidetaskitem">
                    @Html.LabelFor(model => model.due_date, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.due_date, new { htmlAttributes = new { @class = "form-control datepicker", @placeholder = "dd/mm/yyyy" } })
                        @Html.ValidationMessageFor(model => model.due_date, "", new { @class = "text-danger" })
                    </div>
                </div>


         

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-6">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }

        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>

        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
    @*@Scripts.Render("~/bundles/nicedit")*@
<script src="@Url.Content("~/Scripts/plugins/tinymce/tinymce.min.js")"></script>
<script>

    $(document).ready(function () {
        var _minyear = new Date().getFullYear();
        var _max_year = _minyear + 1;
        $('.datepicker').datepicker({
            startDate: '0',
            format: 'dd/mm/yyyy',
            autoclose: true,
            clearBtn: true
        });

        
        tinymce.init({
            selector: '.tinymce',
            plugins: "textcolor table code advlist emoticons charmap hr image link",
            toolbar: "bold italic underline forecolor backcolor table strikethrough  code emoticons bullist numlist  link"
        });


        jQuery.validator.methods["date"] = function (value, element) { return true; }

        $('.chosen-select').chosen();

        $('.combodate').combodate({

            minYear: _minyear,
            maxYear: _max_year,
        });

        $('body').on('change', '.typechanged', function () {

            var ty = $(this).val();

            if(ty == 8)
            {
                $('.hidetaskitem').hide();
                $('.hideinfoitem').show();
            } else {
                $('.hidetaskitem').show();
                $('.hideinfoitem').hide();
            }
            

            
        });

    });

            

    

        //bkLib.onDomLoaded(function () {

        //    //nicEditors.allTextAreas();
        //    new nicEditor({
        //        //  fullPanel: true,
        //        buttonList: ['fontSize', 'bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'subscript', 'superscript', 'strikethrough', 'removeformat', 'indent', 'outdent', 'hr', 'forecolor', 'bgcolor']
        //    }).panelInstance('area2');
        //    //nicEditors.findEditor('myArea2');
        //});
            </script>


        }
